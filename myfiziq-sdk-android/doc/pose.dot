digraph hierarchy {
	size="5,5"
	rankdir="LR"
	//rankdir="BT"
	node[shape=record]
	//edge[dir=forward, arrowtail=empty]


	subgraph cluster_FragmentCapture {
	    label = "FragmentCapture"
	    runInspection[label = "runInspection()"]
	}
	subgraph cluster_MyFiziqUtils{
	    label = "MyFiziqUtils"
	    inspect[label = "JNI interface|inspect(...)"]
	}
	subgraph cluster_MFZJniUtils{
	    label = "MFZJniUtils"
	    PoseInspect[label = "C++/JNI wrapper|PoseInspect(...)"]
	}
	subgraph cluster_Pose{
	    label = "Pose"
	    Pose[label = "run(...)"]
	}
	subgraph TensorPoseThread{
	    label = "TensorPoseThread"
	    TensorPoseThread[shape=plaintext, label=<<TABLE BORDER="0" CELLBORDER="1" CELLSPACING="0"><TR><TD>TensorPoseThread</TD></TR><TR><TD>create thread for each image</TD></TR><TR><TD>run</TD></TR></TABLE>>];
	}
	subgraph cluster_OpenCV{
	    label = "OpenCV"
	    flip[label = "flip captured image|flip(...)"]
	}
	subgraph cluster_FactoryTensor{
	    label = "FactoryTensor"
	    pose[label = "pose(...)"]
	    performImageInspection[label = "performImageInspection(...)"]
	    {
	        rank=same;
	        detectFace[label = "Find single face in image|FactoryTensor::detectFace(...)"]
	        predictFromHeatMap[label = "Prepare/run TF Pose|FactoryTensor::predictFromHeatMap(...)"]
	        
	    }
	    processImage[label = "Scale, crop, dialate, floodfill|FactoryTensor::processImage(...)"]
	    OpenCV_F32[label = "Convert to float 32|cv::convertTo(...)"]
	    FactoryTensorOp[label = "Post TF run request|FactoryTensorOp(FactoryTensorOpPose,...)"]
	    FactoryTensorOp_Wait[label = "Wait for TF run result|FactoryTensorOpQueue::popWait"]
	    pose->performImageInspection[dir="both"]
    	performImageInspection:s->detectFace:n[dir="both"]
    	performImageInspection->predictFromHeatMap[dir="both"]
    	predictFromHeatMap->processImage[dir="both"]
    	predictFromHeatMap->OpenCV_F32[dir="both"]
    	predictFromHeatMap->FactoryTensorOp
    	predictFromHeatMap->FactoryTensorOp_Wait[dir="back"]
	}


	runInspection->inspect->PoseInspect->Pose->TensorPoseThread->pose->OpenCV [ constraint=true ];
	TensorPoseThread->flip
	//[ constraint=true style=invis ];
}